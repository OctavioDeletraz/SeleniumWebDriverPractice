{
  "stats": {
    "suites": 5,
    "tests": 15,
    "passes": 15,
    "pending": 0,
    "failures": 0,
    "start": "2023-09-22T18:40:58.075Z",
    "end": "2023-09-22T18:41:33.218Z",
    "duration": 35143,
    "testsRegistered": 15,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "03573f9c-603b-4fee-9ea0-b7425e36a1d7",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1b07fcb2-068e-42d3-9112-08f8284d932b",
          "title": "Test add/remove element",
          "fullFile": "C:\\Users\\octav\\OneDrive\\Escritorio\\seleniumAdvenced\\test\\addRemove.spec.js",
          "file": "\\test\\addRemove.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test add/remove element\"",
              "fullTitle": "Test add/remove element \"before each\" hook in \"Test add/remove element\"",
              "timedOut": false,
              "duration": 613,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await addRemove.get_driver('chrome');\nawait addRemove.go_to_url('https://the-internet.herokuapp.com/add_remove_elements/')\nawait addRemove.maximize_window();",
              "err": {},
              "uuid": "127ea3c5-62e2-4264-9832-5f32cad7cc65",
              "parentUUID": "1b07fcb2-068e-42d3-9112-08f8284d932b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Test add/remove element\"",
              "fullTitle": "Test add/remove element \"after each\" hook in \"Test add/remove element\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await addRemove.quite_driver();",
              "err": {},
              "uuid": "bfaaf233-1a4e-436a-b0ed-6bf709e21d4c",
              "parentUUID": "1b07fcb2-068e-42d3-9112-08f8284d932b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Se evalua que al apretar el boton Add Element 5 veces, se añaden la misma cantidad de boton delete, y se valida su texto",
              "fullTitle": "Test add/remove element Se evalua que al apretar el boton Add Element 5 veces, se añaden la misma cantidad de boton delete, y se valida su texto",
              "timedOut": false,
              "duration": 1587,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let buttonAdd = await driver.findElements(By.xpath(formSelectors.buttonAddXpath));\n        await addRemove.waitElementIsEnabled(buttonAdd);\n        let elementNull = await driver.findElements(By.css(`#${formSelectors.elementsId} > button`));\n        //Verifico que el array este vacío al comienzo\n        assert.isEmpty(elementNull);\n        for (let index = 0; index < formSelectors.nClicks; index++) {\n            await driver.findElement(By.xpath(formSelectors.buttonAddXpath)).click();\n        }\n        const buttons = await driver.findElements(By.css(`#${formSelectors.elementsId} > button`));\n        let array = [];\n        for (let i = 0; i < buttons.length; i++) {\n            const buttonText = await buttons[i].getText();\n            array.push(buttonText);\n        }\n        for (let i = 0; i < array.length; i++) {\n            const element = array[i];\n            assert.equal(element, formSelectors.deleteButtonText);\n        }",
              "err": {},
              "uuid": "addd7dcc-8a59-49e8-91a3-f87fefcfaccd",
              "parentUUID": "1b07fcb2-068e-42d3-9112-08f8284d932b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Se valida que al apretar el boton AddElement se añada un Delete, y al apretar el Delete este mismo se borre",
              "fullTitle": "Test add/remove element Se valida que al apretar el boton AddElement se añada un Delete, y al apretar el Delete este mismo se borre",
              "timedOut": false,
              "duration": 1490,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Busco el boton agregar y lo presiono\nlet buttonAdd = await driver.findElements(By.xpath(formSelectors.buttonAddXpath));\nawait addRemove.waitElementIsEnabled(buttonAdd);\nawait addRemove.clickByXpath(formSelectors.buttonAddXpath);\n\n//Busco el boton Delete que se deberia haber agregado\nconst buttonDelete = await driver.findElements(By.css(`#${formSelectors.elementsId} > button`));\n//Verifico que exista el boton\nassert.exists(buttonDelete);\n//Extraigo el texto del boton y verifico que sea igual a lo esperado\nlet buttonDeleteText = await addRemove.getTextByCss(`#${formSelectors.elementsId} > button`);\nassert.equal(buttonDeleteText, formSelectors.deleteButtonText);\n//Hago click sobre el boton Delete y verifico que deje de existir\nawait addRemove.clickByCss(`#${formSelectors.elementsId} > button`);\nlet elementNull = await addRemove.getTextByCss(`#${formSelectors.elementsId}`);\nassert.isEmpty(elementNull);",
              "err": {},
              "uuid": "b2e7c4c1-97eb-4d0b-ab97-4b21c75f74fb",
              "parentUUID": "1b07fcb2-068e-42d3-9112-08f8284d932b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "addd7dcc-8a59-49e8-91a3-f87fefcfaccd",
            "b2e7c4c1-97eb-4d0b-ab97-4b21c75f74fb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3077,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "c775e985-c51e-404c-850d-68dcf953e2d3",
          "title": "Evaluacion form con textBox",
          "fullFile": "C:\\Users\\octav\\OneDrive\\Escritorio\\seleniumAdvenced\\test\\elementsTextBox.spec.js",
          "file": "\\test\\elementsTextBox.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Evaluacion form con textBox\"",
              "fullTitle": "Evaluacion form con textBox \"before each\" hook in \"Evaluacion form con textBox\"",
              "timedOut": false,
              "duration": 587,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await textBox.get_driver(\"chrome\");\nawait textBox.go_to_url(\"https://demoqa.com/text-box\")\nawait textBox.maximize_window();",
              "err": {},
              "uuid": "4f684e30-d00e-4126-ac29-26ec5ee3049b",
              "parentUUID": "c775e985-c51e-404c-850d-68dcf953e2d3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Evaluacion form con textBox\"",
              "fullTitle": "Evaluacion form con textBox \"after each\" hook in \"Evaluacion form con textBox\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "599ef9ca-77d1-4bcc-b258-bb77d487510f",
              "parentUUID": "c775e985-c51e-404c-850d-68dcf953e2d3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Se ingresan los datos correctamente y se valida la salida",
              "fullTitle": "Evaluacion form con textBox Se ingresan los datos correctamente y se valida la salida",
              "timedOut": false,
              "duration": 1376,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Ingreso los datos al form\n        await textBox.enter_form(form, formSelectors);\n        //Obtengo los datos de salida\n        let output = await textBox.obtenerArrayOutput();\n        //Valido que exista el output\n        assert.exists(output);\n        //Valido los datos\n        assert.include(output[0], form.fullName);\n        assert.include(output[1], form.email);\n        assert.include(output[2], form.currentAddress);\n        assert.include(output[3], form.permanentAddress);",
              "err": {},
              "uuid": "57b079de-5c36-40fc-88f4-a3f25d1a2ac0",
              "parentUUID": "c775e985-c51e-404c-850d-68dcf953e2d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "No se ingresan los datos, se valida el error y que no suban los datos",
              "fullTitle": "Evaluacion form con textBox No se ingresan los datos, se valida el error y que no suban los datos",
              "timedOut": false,
              "duration": 1559,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Hago click en el boton sin rellenar el formulario\nawait textBox.clickById(formSelectors.submitButtonId);\n//Intento obtener el output\nlet output = await textBox.obtenerArrayOutput();\n//valido que la variable este vacía\nassert.isEmpty(output);",
              "err": {},
              "uuid": "e7612c4e-1a20-4e98-af6f-73896698cf5e",
              "parentUUID": "c775e985-c51e-404c-850d-68dcf953e2d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Se ingresa mal el email, se valida que no suban los datos",
              "fullTitle": "Evaluacion form con textBox Se ingresa mal el email, se valida que no suban los datos",
              "timedOut": false,
              "duration": 1749,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Modifico momentaneamente la variable email\n        let emailOriginal = form.email;\n        form.email = 'octavio';\n        //ingreso el form con la variable email editada para que de error\n        await textBox.enter_form(form, formSelectors);\n        //Obtengo el output\n        let output = await textBox.obtenerArrayOutput();\n        //valido que la variable de salida output esté vacía, ya que no se deberia hayar\n        assert.isEmpty(output);\n        form.email = emailOriginal;",
              "err": {},
              "uuid": "9449d89b-b049-459e-a2a8-cafe2e4f3331",
              "parentUUID": "c775e985-c51e-404c-850d-68dcf953e2d3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "57b079de-5c36-40fc-88f4-a3f25d1a2ac0",
            "e7612c4e-1a20-4e98-af6f-73896698cf5e",
            "9449d89b-b049-459e-a2a8-cafe2e4f3331"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4684,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "705693e6-5f1c-4d55-88e5-756835e6c118",
          "title": "Testeo correcta navegacion en la homePage para cada card",
          "fullFile": "C:\\Users\\octav\\OneDrive\\Escritorio\\seleniumAdvenced\\test\\homePage.spec.js",
          "file": "\\test\\homePage.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testeo correcta navegacion en la homePage para cada card\"",
              "fullTitle": "Testeo correcta navegacion en la homePage para cada card \"before each\" hook in \"Testeo correcta navegacion en la homePage para cada card\"",
              "timedOut": false,
              "duration": 4382,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Abro el navegador\ndriver = await new webdriver.Builder().forBrowser('chrome').build();\n//maximizo la ventana\nawait driver.manage().window().maximize();\n//Navego a la URL\nawait driver.get(\"https://demoqa.com/\");",
              "err": {},
              "uuid": "fe440489-ad16-47be-b39b-0f6384a4b0e3",
              "parentUUID": "705693e6-5f1c-4d55-88e5-756835e6c118",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testeo correcta navegacion en la homePage para cada card\"",
              "fullTitle": "Testeo correcta navegacion en la homePage para cada card \"after each\" hook in \"Testeo correcta navegacion en la homePage para cada card\"",
              "timedOut": false,
              "duration": 21,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "dcc5a58b-1601-40d5-8dfc-c4c4ea58e001",
              "parentUUID": "705693e6-5f1c-4d55-88e5-756835e6c118",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Ingreso a la card Elements y verifico su ruta https://demoqa.com/elements",
              "fullTitle": "Testeo correcta navegacion en la homePage para cada card Ingreso a la card Elements y verifico su ruta https://demoqa.com/elements",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Obtengo una referencia de donde hacer click dentro de la card\n            let cardToClick = await driver.findElement(By.xpath(`//h5[contains(text(), '${card.cardTitle}')]`));\n            //Cliqueo\n            await cardToClick.click();\n            //Obtengo URL de la pagina a la cual navego y verifico coincida con la proporcionada\n            let urlNew = await driver.getCurrentUrl();\n            assert.equal(urlNew, card.URL);",
              "err": {},
              "uuid": "433162d9-6208-4283-8be7-a81023068e44",
              "parentUUID": "705693e6-5f1c-4d55-88e5-756835e6c118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ingreso a la card Forms y verifico su ruta https://demoqa.com/forms",
              "fullTitle": "Testeo correcta navegacion en la homePage para cada card Ingreso a la card Forms y verifico su ruta https://demoqa.com/forms",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Obtengo una referencia de donde hacer click dentro de la card\n            let cardToClick = await driver.findElement(By.xpath(`//h5[contains(text(), '${card.cardTitle}')]`));\n            //Cliqueo\n            await cardToClick.click();\n            //Obtengo URL de la pagina a la cual navego y verifico coincida con la proporcionada\n            let urlNew = await driver.getCurrentUrl();\n            assert.equal(urlNew, card.URL);",
              "err": {},
              "uuid": "8b1c8674-54c4-454c-a044-2ba3541a7094",
              "parentUUID": "705693e6-5f1c-4d55-88e5-756835e6c118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ingreso a la card Alerts y verifico su ruta https://demoqa.com/alertsWindows",
              "fullTitle": "Testeo correcta navegacion en la homePage para cada card Ingreso a la card Alerts y verifico su ruta https://demoqa.com/alertsWindows",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Obtengo una referencia de donde hacer click dentro de la card\n            let cardToClick = await driver.findElement(By.xpath(`//h5[contains(text(), '${card.cardTitle}')]`));\n            //Cliqueo\n            await cardToClick.click();\n            //Obtengo URL de la pagina a la cual navego y verifico coincida con la proporcionada\n            let urlNew = await driver.getCurrentUrl();\n            assert.equal(urlNew, card.URL);",
              "err": {},
              "uuid": "2f7f4b5e-75f4-45d5-a8dc-a395a3cc4689",
              "parentUUID": "705693e6-5f1c-4d55-88e5-756835e6c118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ingreso a la card Widgets y verifico su ruta https://demoqa.com/widgets",
              "fullTitle": "Testeo correcta navegacion en la homePage para cada card Ingreso a la card Widgets y verifico su ruta https://demoqa.com/widgets",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Obtengo una referencia de donde hacer click dentro de la card\n            let cardToClick = await driver.findElement(By.xpath(`//h5[contains(text(), '${card.cardTitle}')]`));\n            //Cliqueo\n            await cardToClick.click();\n            //Obtengo URL de la pagina a la cual navego y verifico coincida con la proporcionada\n            let urlNew = await driver.getCurrentUrl();\n            assert.equal(urlNew, card.URL);",
              "err": {},
              "uuid": "833f673a-cc59-43b7-9cbe-7d426415e178",
              "parentUUID": "705693e6-5f1c-4d55-88e5-756835e6c118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ingreso a la card Interaction y verifico su ruta https://demoqa.com/interaction",
              "fullTitle": "Testeo correcta navegacion en la homePage para cada card Ingreso a la card Interaction y verifico su ruta https://demoqa.com/interaction",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Obtengo una referencia de donde hacer click dentro de la card\n            let cardToClick = await driver.findElement(By.xpath(`//h5[contains(text(), '${card.cardTitle}')]`));\n            //Cliqueo\n            await cardToClick.click();\n            //Obtengo URL de la pagina a la cual navego y verifico coincida con la proporcionada\n            let urlNew = await driver.getCurrentUrl();\n            assert.equal(urlNew, card.URL);",
              "err": {},
              "uuid": "7d48121b-e5a3-47f8-a848-67621a8a13b3",
              "parentUUID": "705693e6-5f1c-4d55-88e5-756835e6c118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ingreso a la card Book y verifico su ruta https://demoqa.com/books",
              "fullTitle": "Testeo correcta navegacion en la homePage para cada card Ingreso a la card Book y verifico su ruta https://demoqa.com/books",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Obtengo una referencia de donde hacer click dentro de la card\n            let cardToClick = await driver.findElement(By.xpath(`//h5[contains(text(), '${card.cardTitle}')]`));\n            //Cliqueo\n            await cardToClick.click();\n            //Obtengo URL de la pagina a la cual navego y verifico coincida con la proporcionada\n            let urlNew = await driver.getCurrentUrl();\n            assert.equal(urlNew, card.URL);",
              "err": {},
              "uuid": "8354c692-d1a3-40d9-9b07-ca490c5916b1",
              "parentUUID": "705693e6-5f1c-4d55-88e5-756835e6c118",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "433162d9-6208-4283-8be7-a81023068e44",
            "8b1c8674-54c4-454c-a044-2ba3541a7094",
            "2f7f4b5e-75f4-45d5-a8dc-a395a3cc4689",
            "833f673a-cc59-43b7-9cbe-7d426415e178",
            "7d48121b-e5a3-47f8-a848-67621a8a13b3",
            "8354c692-d1a3-40d9-9b07-ca490c5916b1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 281,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "f9018da2-2a99-4aa9-ab9a-35651d0caa53",
          "title": "Test para buscar imagenes rotas",
          "fullFile": "C:\\Users\\octav\\OneDrive\\Escritorio\\seleniumAdvenced\\test\\imagenesRotas.spec.js",
          "file": "\\test\\imagenesRotas.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test para buscar imagenes rotas\"",
              "fullTitle": "Test para buscar imagenes rotas \"before each\" hook in \"Test para buscar imagenes rotas\"",
              "timedOut": false,
              "duration": 604,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await verificarImagen.get_driver(\"chrome\");\nawait verificarImagen.go_to_url(\"https://the-internet.herokuapp.com/broken_images\")\nawait verificarImagen.maximize_window();",
              "err": {},
              "uuid": "e9a6924f-3193-42c5-b82e-4fe8f01f88a6",
              "parentUUID": "f9018da2-2a99-4aa9-ab9a-35651d0caa53",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Test para buscar imagenes rotas\"",
              "fullTitle": "Test para buscar imagenes rotas \"after each\" hook in \"Test para buscar imagenes rotas\"",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "6ce85e29-39ac-4adc-95dd-359761409c4f",
              "parentUUID": "f9018da2-2a99-4aa9-ab9a-35651d0caa53",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Imagenes rotas",
              "fullTitle": "Test para buscar imagenes rotas Imagenes rotas",
              "timedOut": false,
              "duration": 3162,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Creo el array\n        let imagenesSinCargar = [];\n        let imagenes404 = [];\n        //LLamo a la funcion para obtener si es que hay imagenes sin cargar\n        imagenesSinCargar = await verificarImagen.imagenesSinCargar();\n        imagenes404 = await verificarImagen.imagenesNotFound();\n        if (imagenesSinCargar) {\n            console.log(`Hay imagenes que no cargaron y son las siguientes: ${imagenesSinCargar}`)\n        };\n        if (imagenes404) {\n            console.log(`Hay imagenes con enlaces rotos y son las siguientes: ${imagenes404}`)\n        };\n        //Dejo esta porque en este ejemplo necesito enlaces rotos y valido eso....\n        assert.isNotEmpty(imagenesSinCargar);\n        assert.isNotEmpty(imagenes404);\n        //Aqui si funcionace bien\n        /*  assert.isEmpty(imagenesSinCargar);\n         assert.isEmpty(imagenes404); */",
              "err": {},
              "uuid": "10dabb78-1ff7-4830-b0f1-1f5e208f469c",
              "parentUUID": "f9018da2-2a99-4aa9-ab9a-35651d0caa53",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "10dabb78-1ff7-4830-b0f1-1f5e208f469c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3162,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "1704acfc-c568-4ea7-90ab-adc04d211a9a",
          "title": "Se valida el login de un usuario",
          "fullFile": "C:\\Users\\octav\\OneDrive\\Escritorio\\seleniumAdvenced\\test\\login.spec.js",
          "file": "\\test\\login.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Se valida el login de un usuario\"",
              "fullTitle": "Se valida el login de un usuario \"before each\" hook in \"Se valida el login de un usuario\"",
              "timedOut": false,
              "duration": 612,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await login.get_driver(\"chrome\");\nawait login.go_to_url(\"https://the-internet.herokuapp.com/login\");\nawait login.maximize_window();",
              "err": {},
              "uuid": "4a3b7de6-756e-400c-a4df-99832f2fb758",
              "parentUUID": "1704acfc-c568-4ea7-90ab-adc04d211a9a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Se valida el login de un usuario\"",
              "fullTitle": "Se valida el login de un usuario \"after each\" hook in \"Se valida el login de un usuario\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await login.quite_driver();",
              "err": {},
              "uuid": "02f3755f-b524-4cc1-847f-36ff67d626c2",
              "parentUUID": "1704acfc-c568-4ea7-90ab-adc04d211a9a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Se valida el login y logout exitosos",
              "fullTitle": "Se valida el login de un usuario Se valida el login y logout exitosos",
              "timedOut": false,
              "duration": 2141,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Ingreso el formulario\nawait login.ingresoUsuario(selectorsForm, userForm);\n//Obtengo la url y la valido que sea /secure\nflash = await global.driver.findElement(By.id(selectorsForm.flashMessageId));\nawait login.waitElementIsVisible(flash);\nflash = await login.getTextById(selectorsForm.flashMessageId);\nassert.include(flash, flashMessages.alreadylogged);\n//Obtengo la url y la valido\nUrl = await global.driver.getCurrentUrl();\nassert.equal(UrlForm.loggIn, Url);\n//Busco el boton logOut y valido que exista\nlet buttonLogOut = await login.getTextByCss(selectorsForm.logOutButtonCss);\nassert.exists(buttonLogOut);\n\n//Valido el contenido\nassert.equal(buttonLogOut, \"Logout\");\n//Cliqueo el boton\nawait login.clickByCss(selectorsForm.logOutButtonCss);\n//Valido el mensaje flash de logout exitoso\nflash = await global.driver.findElement(By.id(selectorsForm.flashMessageId));\nawait login.waitElementIsVisible(flash);\nflash = await login.getTextById(selectorsForm.flashMessageId);\nassert.include(flash, flashMessages.loginPage);\n//Obtengo la url y la valido que sea /login\nUrl = await global.driver.getCurrentUrl();\nassert.equal(UrlForm.loggOut, Url);",
              "err": {},
              "uuid": "f71725e7-a415-42bb-b2ac-3f3138bc77b1",
              "parentUUID": "1704acfc-c568-4ea7-90ab-adc04d211a9a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Username invalido",
              "fullTitle": "Se valida el login de un usuario Username invalido",
              "timedOut": false,
              "duration": 1973,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//cambio el password del usuario para el ingreso\nlet userOriginal = userForm.user;\nuserForm.user = \"Pedro\";\nawait login.ingresoUsuario(selectorsForm, userForm);\n//Obtengo la url y la valido que sea /login\nUrl = await global.driver.getCurrentUrl();\nassert.equal(UrlForm.loggOut, Url);\n//Obtengo el mensaje Flash de login y valido\nflash = await global.driver.findElement(By.id(selectorsForm.flashMessageId));\nawait login.waitElementIsVisible(flash);\nflash = await login.getTextById(selectorsForm.flashMessageId);\nassert.include(flash, flashMessages.invalidUser);\nuserForm.user = userOriginal;",
              "err": {},
              "uuid": "e709030b-8021-4099-8a05-9f369aa6d881",
              "parentUUID": "1704acfc-c568-4ea7-90ab-adc04d211a9a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Password invalido",
              "fullTitle": "Se valida el login de un usuario Password invalido",
              "timedOut": false,
              "duration": 1925,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//cambio el password del usuario para el ingreso\nlet passOriginal = userForm.pass;\nuserForm.pass = \"123\";\nawait login.ingresoUsuario(selectorsForm, userForm);\n//Obtengo la url y la valido que sea /login\nUrl = await global.driver.getCurrentUrl();\nassert.equal(UrlForm.loggOut, Url);\n//Obtengo el mensaje Flash de login y valido\nflash = await global.driver.findElement(By.id(selectorsForm.flashMessageId));\nawait login.waitElementIsVisible(flash);\nflash = await login.getTextById(selectorsForm.flashMessageId);\nassert.include(flash, flashMessages.invalidPass);\nuserForm.pass = passOriginal;",
              "err": {},
              "uuid": "fe466557-9073-43c6-8cd4-fb677cddb140",
              "parentUUID": "1704acfc-c568-4ea7-90ab-adc04d211a9a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f71725e7-a415-42bb-b2ac-3f3138bc77b1",
            "e709030b-8021-4099-8a05-9f369aa6d881",
            "fe466557-9073-43c6-8cd4-fb677cddb140"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6039,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "testResults",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "/Users/octav/OneDrive/Escritorio/seleniumAdvenced/TestsReports",
        "reportFilename": "testResults"
      },
      "version": "6.2.0"
    }
  }
}