{
  "stats": {
    "suites": 11,
    "tests": 28,
    "passes": 28,
    "pending": 0,
    "failures": 0,
    "start": "2023-09-26T17:25:30.176Z",
    "end": "2023-09-26T17:26:28.946Z",
    "duration": 58770,
    "testsRegistered": 28,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e80e474b-fac9-4b56-95b1-a361c823ebca",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e66076b1-8b31-44ff-9862-103b8d8ea061",
          "title": "Test add/remove element",
          "fullFile": "C:\\Users\\octav\\OneDrive\\Escritorio\\seleniumAdvenced\\test\\addRemove.spec.js",
          "file": "\\test\\addRemove.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test add/remove element\"",
              "fullTitle": "Test add/remove element \"before each\" hook in \"Test add/remove element\"",
              "timedOut": false,
              "duration": 595,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await addRemove.get_driver('chrome');\nawait addRemove.go_to_url('https://the-internet.herokuapp.com/add_remove_elements/')\nawait addRemove.maximize_window();",
              "err": {},
              "uuid": "4240d62f-d13e-40f4-aa54-b8297c10b407",
              "parentUUID": "e66076b1-8b31-44ff-9862-103b8d8ea061",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Test add/remove element\"",
              "fullTitle": "Test add/remove element \"after each\" hook in \"Test add/remove element\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await addRemove.quite_driver();",
              "err": {},
              "uuid": "da978d32-8b75-4dcc-8c02-be6189252aae",
              "parentUUID": "e66076b1-8b31-44ff-9862-103b8d8ea061",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Se evalua que al apretar el boton Add Element 5 veces, se añaden la misma cantidad de boton delete, y se valida su texto",
              "fullTitle": "Test add/remove element Se evalua que al apretar el boton Add Element 5 veces, se añaden la misma cantidad de boton delete, y se valida su texto",
              "timedOut": false,
              "duration": 1489,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let buttonAdd = await driver.findElements(By.xpath(formSelectors.buttonAddXpath));\n        await addRemove.waitElementIsEnabled(buttonAdd);\n        let elementNull = await driver.findElements(By.css(`#${formSelectors.elementsId} > button`));\n        //Verifico que el array este vacío al comienzo\n        assert.isEmpty(elementNull);\n        for (let index = 0; index < formSelectors.nClicks; index++) {\n            await driver.findElement(By.xpath(formSelectors.buttonAddXpath)).click();\n        }\n        const buttons = await driver.findElements(By.css(`#${formSelectors.elementsId} > button`));\n        let array = [];\n        for (let i = 0; i < buttons.length; i++) {\n            const buttonText = await buttons[i].getText();\n            array.push(buttonText);\n        }\n        for (let i = 0; i < array.length; i++) {\n            const element = array[i];\n            assert.equal(element, formSelectors.deleteButtonText);\n        }",
              "err": {},
              "uuid": "3fd78a70-89c2-45d8-91b5-ad196e0ad292",
              "parentUUID": "e66076b1-8b31-44ff-9862-103b8d8ea061",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Se valida que al apretar el boton AddElement se añada un Delete, y al apretar el Delete este mismo se borre",
              "fullTitle": "Test add/remove element Se valida que al apretar el boton AddElement se añada un Delete, y al apretar el Delete este mismo se borre",
              "timedOut": false,
              "duration": 1442,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Busco el boton agregar y lo presiono\nlet buttonAdd = await driver.findElements(By.xpath(formSelectors.buttonAddXpath));\nawait addRemove.waitElementIsEnabled(buttonAdd);\nawait addRemove.clickByXpath(formSelectors.buttonAddXpath);\n\n//Busco el boton Delete que se deberia haber agregado\nconst buttonDelete = await driver.findElements(By.css(`#${formSelectors.elementsId} > button`));\n//Verifico que exista el boton\nassert.exists(buttonDelete);\n//Extraigo el texto del boton y verifico que sea igual a lo esperado\nlet buttonDeleteText = await addRemove.getTextByCss(`#${formSelectors.elementsId} > button`);\nassert.equal(buttonDeleteText, formSelectors.deleteButtonText);\n//Hago click sobre el boton Delete y verifico que deje de existir\nawait addRemove.clickByCss(`#${formSelectors.elementsId} > button`);\nlet elementNull = await addRemove.getTextByCss(`#${formSelectors.elementsId}`);\nassert.isEmpty(elementNull);",
              "err": {},
              "uuid": "4a295b66-ed66-40bf-9b7d-be56e10003f5",
              "parentUUID": "e66076b1-8b31-44ff-9862-103b8d8ea061",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3fd78a70-89c2-45d8-91b5-ad196e0ad292",
            "4a295b66-ed66-40bf-9b7d-be56e10003f5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2931,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "e18eb8ee-293f-4772-8fa5-599736f4be93",
          "title": "Validamos CheckBox",
          "fullFile": "C:\\Users\\octav\\OneDrive\\Escritorio\\seleniumAdvenced\\test\\checkBox.spec.js",
          "file": "\\test\\checkBox.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Validamos CheckBox\"",
              "fullTitle": "Validamos CheckBox \"before each\" hook in \"Validamos CheckBox\"",
              "timedOut": false,
              "duration": 598,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await checkBox.get_driver(\"chrome\");\nawait checkBox.go_to_url(\"https://the-internet.herokuapp.com/checkboxes\")\nawait checkBox.maximize_window();",
              "err": {},
              "uuid": "4307225c-db06-44d6-a5c0-d0f5a71f3eee",
              "parentUUID": "e18eb8ee-293f-4772-8fa5-599736f4be93",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Validamos CheckBox\"",
              "fullTitle": "Validamos CheckBox \"after each\" hook in \"Validamos CheckBox\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "875d9ce7-eb64-46c8-8d76-9f19f7cfe37c",
              "parentUUID": "e18eb8ee-293f-4772-8fa5-599736f4be93",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Valido los que se tilden los checkBox",
              "fullTitle": "Validamos CheckBox Valido los que se tilden los checkBox",
              "timedOut": false,
              "duration": 1444,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const form = await global.driver.findElement(By.id(selectors.formId));\n        // Encuentra todos los elementos <input> dentro del formulario\n        const checkboxes = await form.findElements(By.css('input'));\n        //Primero valido que al cargar la página este tildado el 2do y no el primero\n        let isChecked1 = await checkboxes[0].isSelected();\n        assert.isFalse(isChecked1, \"Se espera False, que no este tildado\");\n        let isChecked2 = await checkboxes[1].isSelected();\n        assert.isTrue(isChecked2, \"Se espera True, que este tildado\");\n        //Valido que al clickear el primero este se tilde\n        await checkboxes[0].click();\n        isChecked1 = await checkboxes[0].isSelected();\n        assert.isTrue(isChecked2, \"Se espera True, que este tildado\");\n        //Valido que al clickear el segundo este se tilde\n        await checkboxes[1].click();\n        isChecked2 = await checkboxes[1].isSelected();\n        assert.isFalse(isChecked2, \"Se espera False, que no este tildado\");",
              "err": {},
              "uuid": "3a272113-a1f1-4c9b-bc02-2861de512f54",
              "parentUUID": "e18eb8ee-293f-4772-8fa5-599736f4be93",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3a272113-a1f1-4c9b-bc02-2861de512f54"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1444,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "0b1b9410-17d3-4952-94f4-2c4fe6cff831",
          "title": "Validamos contextMenu",
          "fullFile": "C:\\Users\\octav\\OneDrive\\Escritorio\\seleniumAdvenced\\test\\contextMenu.spec.js",
          "file": "\\test\\contextMenu.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Validamos contextMenu\"",
              "fullTitle": "Validamos contextMenu \"before each\" hook in \"Validamos contextMenu\"",
              "timedOut": false,
              "duration": 589,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await contextMenu.get_driver(\"chrome\");\nawait contextMenu.go_to_url(\"https://the-internet.herokuapp.com/context_menu\")\nawait contextMenu.maximize_window();",
              "err": {},
              "uuid": "cd4c83bf-0758-43ed-abc8-26e9f944cca4",
              "parentUUID": "0b1b9410-17d3-4952-94f4-2c4fe6cff831",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Validamos contextMenu\"",
              "fullTitle": "Validamos contextMenu \"after each\" hook in \"Validamos contextMenu\"",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "cdf5a093-5a08-4611-ab53-d0ac11b12f78",
              "parentUUID": "0b1b9410-17d3-4952-94f4-2c4fe6cff831",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "",
              "fullTitle": "Validamos contextMenu ",
              "timedOut": false,
              "duration": 1606,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const element = await driver.findElement(By.id(selectors.sectionOfInterestId));\n// Crea una instancia de ActionSequence\nconst actions = driver.actions({ bridge: true });\n// Realiza un clic derecho en el elemento\nawait actions.contextClick(element).perform();\nconst alert = await driver.switchTo().alert();\n// Obtengo el texto de la alerta y valido que este correcto\nconst alertText = await alert.getText();\nassert.equal(alertText, \"You selected a context menu\");\nawait alert.accept();",
              "err": {},
              "uuid": "cf9c9055-9602-4bbf-a254-edcf7a74d548",
              "parentUUID": "0b1b9410-17d3-4952-94f4-2c4fe6cff831",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cf9c9055-9602-4bbf-a254-edcf7a74d548"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1606,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "69ab088e-cde6-4fd1-9b57-a41604378b51",
          "title": "autenticacion digest",
          "fullFile": "C:\\Users\\octav\\OneDrive\\Escritorio\\seleniumAdvenced\\test\\digestResponse.spec.js",
          "file": "\\test\\digestResponse.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"autenticacion digest\"",
              "fullTitle": "autenticacion digest \"before each\" hook in \"autenticacion digest\"",
              "timedOut": false,
              "duration": 589,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await digestAuth.get_driver(\"chrome\");\nawait digestAuth.maximize_window();",
              "err": {},
              "uuid": "0077016b-9978-4f3d-81fd-c12915972d0b",
              "parentUUID": "69ab088e-cde6-4fd1-9b57-a41604378b51",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"autenticacion digest\"",
              "fullTitle": "autenticacion digest \"after each\" hook in \"autenticacion digest\"",
              "timedOut": false,
              "duration": 697,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await global.driver.quit();",
              "err": {},
              "uuid": "8b65420a-8f5f-4e80-bc4c-38753f34ad85",
              "parentUUID": "69ab088e-cde6-4fd1-9b57-a41604378b51",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Se intenta el caso de exito con los datos correctos para login",
              "fullTitle": "autenticacion digest Se intenta el caso de exito con los datos correctos para login",
              "timedOut": false,
              "duration": 1544,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Se autentifica con los datos correcto\nawait digestAuth.autenticacionDigest(form.usuario, form.pass);\n//Se valida el mensaje de exito\nlet textoExito = await global.driver.findElement(By.css(\"#content p\")).getText();\nassert.equal(textoExito, \"Congratulations! You must have the proper credentials.\")",
              "err": {},
              "uuid": "149a2bfb-f415-40e2-b1f9-4563e70d3edd",
              "parentUUID": "69ab088e-cde6-4fd1-9b57-a41604378b51",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Se intenta ingresar con datos incorrectos",
              "fullTitle": "autenticacion digest Se intenta ingresar con datos incorrectos",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Se autentifica con los datos correcto\nawait digestAuth.autenticacionDigest(\"Uruario Incorrecto\", \"passwordIncorrecto\");\n//Aca no se que validar\n/*         let textoExito = await global.driver.findElement(By.css(\"#content p\")).getText();\n        assert.equal(textoExito, \"Congratulations! You must have the proper credentials.\") */",
              "err": {},
              "uuid": "cfc69f48-dbc0-411e-bfad-1e7cf4bebf5a",
              "parentUUID": "69ab088e-cde6-4fd1-9b57-a41604378b51",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "149a2bfb-f415-40e2-b1f9-4563e70d3edd",
            "cfc69f48-dbc0-411e-bfad-1e7cf4bebf5a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1544,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "6f7c8754-d45a-4ca3-bdd9-c36c56bd42d9",
          "title": "Testeo de dropdown con un select menu",
          "fullFile": "C:\\Users\\octav\\OneDrive\\Escritorio\\seleniumAdvenced\\test\\dropDown.spec.js",
          "file": "\\test\\dropDown.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testeo de dropdown con un select menu\"",
              "fullTitle": "Testeo de dropdown con un select menu \"before each\" hook in \"Testeo de dropdown con un select menu\"",
              "timedOut": false,
              "duration": 589,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dropDown.get_driver(\"chrome\");\nawait dropDown.maximize_window();\nawait dropDown.go_to_url(\"https://demoqa.com/select-menu\")",
              "err": {},
              "uuid": "4ac38a52-181a-4082-ae6a-688f2159e5f1",
              "parentUUID": "6f7c8754-d45a-4ca3-bdd9-c36c56bd42d9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testeo de dropdown con un select menu\"",
              "fullTitle": "Testeo de dropdown con un select menu \"after each\" hook in \"Testeo de dropdown con un select menu\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await global.driver.quit();",
              "err": {},
              "uuid": "2ca6e302-0485-4122-931b-ab0b3575e71a",
              "parentUUID": "6f7c8754-d45a-4ca3-bdd9-c36c56bd42d9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Abro oldStyle select y elijo alguna categoria, valido su texto",
              "fullTitle": "Testeo de dropdown con un select menu Abro oldStyle select y elijo alguna categoria, valido su texto",
              "timedOut": false,
              "duration": 1309,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Localizar el elemento del dropdown por su ID\n        const dropdown = await global.driver.findElement(By.id(selectors.oldStyleId));\n        // Crear un objeto Select a partir del elemento del dropdown\n        const select = new Select(dropdown);\n        // Selección de opciones en el dropdown\n        // 1. Seleccionar una opción por índice (por ejemplo, la segunda opción)\n        await select.selectByIndex(2);\n        // 2. Seleccionar una opción por valor (si las opciones tienen valores únicos)\n        //    await select.selectByValue('opcion2Valor');\n        // 3. Seleccionar una opción por texto visible (etiqueta de opción)\n        //     await select.selectByVisibleText('Opción 3');\n        // Obtener la opción seleccionada (esto es opcional)\n        const selectedOption = await select.getFirstSelectedOption();\n        assert.equal(await selectedOption.getText(), \"Green\")",
              "err": {},
              "uuid": "43b363b4-2364-473d-8ff4-a8a7d0516869",
              "parentUUID": "6f7c8754-d45a-4ca3-bdd9-c36c56bd42d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Abro el selectValueId y elijo una opcion, valído esa opción",
              "fullTitle": "Testeo de dropdown con un select menu Abro el selectValueId y elijo una opcion, valído esa opción",
              "timedOut": false,
              "duration": 1188,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Localizar elemento del dropdown por su ID\n        const dropDown = await global.driver.findElement(By.id(selectors.selectValueId));\n        await dropDown.click();\n        //Localizar el menú del dropdown con los elementos, este se activa unicamente al clickear el dropdown\n        const dropedMenu = await global.driver.wait(until.elementLocated(By.css(selectors.selectValueMenuCss)), 2000); // Espera hasta 10 segundos\n        //Selecciono un elemento de la lista, en este caso lo busco por texto contenido\n        let textoDeseado = \"Group 2, option 2\"\n        const selectedOption = dropedMenu.findElement(By.xpath(`//div[text()='${textoDeseado}']`))\n        await selectedOption.click();\n        //Localizo el span y evaluo que el seleccionado sea igual al esperado.\n        const span = await global.driver.findElement(By.css(selectors.selectValuSelectedCss));\n        assert.equal(await span.getText(), textoDeseado);",
              "err": {},
              "uuid": "cd11c8f8-92b7-4f28-8ba1-eb560da77925",
              "parentUUID": "6f7c8754-d45a-4ca3-bdd9-c36c56bd42d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Abro el selectOne y elijo una opcion, valído esa opción",
              "fullTitle": "Testeo de dropdown con un select menu Abro el selectOne y elijo una opcion, valído esa opción",
              "timedOut": false,
              "duration": 1451,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Localizar elemento del dropdown por su ID\n        const dropDown = await global.driver.findElement(By.id(selectors.selectOneId));\n        await dropDown.click();\n        //Localizar el menú del dropdown con los elementos, este se activa unicamente al clickear el dropdown\n        const dropedMenu = await global.driver.wait(until.elementLocated(By.css(selectors.selectOneMenuCss)), 2000); // Espera hasta 10 segundos\n        //Selecciono un elemento de la lista, en este caso lo busco por texto contenido\n        let textoDeseado = \"Ms.\"\n        const selectedOption = dropedMenu.findElement(By.xpath(`//div[text()='${textoDeseado}']`))\n        await selectedOption.click();\n        //Localizo el span y evaluo que el seleccionado sea igual al esperado.\n        const span = await global.driver.findElement(By.css(selectors.selectOneSelectedCss));\n        assert.equal(await span.getText(), textoDeseado);",
              "err": {},
              "uuid": "c75aec64-6895-4311-8df6-383e9e3af510",
              "parentUUID": "6f7c8754-d45a-4ca3-bdd9-c36c56bd42d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Abro el multiSelector, elijo las primeras 3 opciones y valído la salida(que contenga los 3)",
              "fullTitle": "Testeo de dropdown con un select menu Abro el multiSelector, elijo las primeras 3 opciones y valído la salida(que contenga los 3)",
              "timedOut": false,
              "duration": 1225,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const colores = [\"Blue\", \"Black\", \"Red\", \"Green\"];\n        const coloresSeleccionados = [];\n        //Localizar elemento del dropdown por su ID\n        const dropDown = await global.driver.findElement(By.css(selectors.multiSelectCss));\n        await dropDown.click();\n        //Localizar el menú del dropdown con los elementos, este se activa unicamente al clickear el dropdown\n        const dropedMenu = await global.driver.wait(until.elementLocated(By.css(selectors.multiSelectMenuCss)), 2000); // Espera hasta 10 segundos\n        for (const color of colores) {\n            //Selecciono un elemento de la lista, en este caso lo busco por texto contenido\n            const selectedOption = dropedMenu.findElement(By.xpath(`//div[text()='${color}']`))\n            await selectedOption.click();\n        }\n        //Localizo el span y evaluo que el seleccionado sea igual al esperado.\n        const span = await global.driver.findElements(By.css(selectors.multiSelectSpanCss));\n        for (const promise of span) {\n            color = await promise.getText();\n            coloresSeleccionados.push(color);\n        }\n        for (let index = 0; index < colores.length; index++) {\n            assert.equal(coloresSeleccionados[index], colores[index]);\n        }",
              "err": {},
              "uuid": "ff918114-01db-4335-8aac-bc1c34c170e4",
              "parentUUID": "6f7c8754-d45a-4ca3-bdd9-c36c56bd42d9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "43b363b4-2364-473d-8ff4-a8a7d0516869",
            "cd11c8f8-92b7-4f28-8ba1-eb560da77925",
            "c75aec64-6895-4311-8df6-383e9e3af510",
            "ff918114-01db-4335-8aac-bc1c34c170e4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5173,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "ec67860f-4321-410a-9e39-025ab3615841",
          "title": "Evaluacion form con textBox",
          "fullFile": "C:\\Users\\octav\\OneDrive\\Escritorio\\seleniumAdvenced\\test\\elementsTextBox.spec.js",
          "file": "\\test\\elementsTextBox.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Evaluacion form con textBox\"",
              "fullTitle": "Evaluacion form con textBox \"before each\" hook in \"Evaluacion form con textBox\"",
              "timedOut": false,
              "duration": 592,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await textBox.get_driver(\"chrome\");\nawait textBox.go_to_url(\"https://demoqa.com/text-box\")\nawait textBox.maximize_window();",
              "err": {},
              "uuid": "de131e34-c9a7-4aba-b786-2cddf77cd3dd",
              "parentUUID": "ec67860f-4321-410a-9e39-025ab3615841",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Evaluacion form con textBox\"",
              "fullTitle": "Evaluacion form con textBox \"after each\" hook in \"Evaluacion form con textBox\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "cd1f4624-b50e-4bcd-bc1e-6c3ec12f1c79",
              "parentUUID": "ec67860f-4321-410a-9e39-025ab3615841",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Se ingresan los datos correctamente y se valida la salida",
              "fullTitle": "Evaluacion form con textBox Se ingresan los datos correctamente y se valida la salida",
              "timedOut": false,
              "duration": 1296,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Ingreso los datos al form\n        await textBox.enter_form(form, formSelectors);\n        //Obtengo los datos de salida\n        let output = await textBox.obtenerArrayOutput();\n        //Valido que exista el output\n        assert.exists(output);\n        //Valido los datos\n        assert.include(output[0], form.fullName);\n        assert.include(output[1], form.email);\n        assert.include(output[2], form.currentAddress);\n        assert.include(output[3], form.permanentAddress);",
              "err": {},
              "uuid": "ec0a3158-5549-41c1-b16d-97f6ce968557",
              "parentUUID": "ec67860f-4321-410a-9e39-025ab3615841",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "No se ingresan los datos, se valida el error y que no suban los datos",
              "fullTitle": "Evaluacion form con textBox No se ingresan los datos, se valida el error y que no suban los datos",
              "timedOut": false,
              "duration": 1243,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Hago click en el boton sin rellenar el formulario\nawait textBox.clickById(formSelectors.submitButtonId);\n//Intento obtener el output\nlet output = await textBox.obtenerArrayOutput();\n//valido que la variable este vacía\nassert.isEmpty(output);",
              "err": {},
              "uuid": "c1f1f9de-a1a9-4170-b250-e9f5ec163a80",
              "parentUUID": "ec67860f-4321-410a-9e39-025ab3615841",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Se ingresa mal el email, se valida que no suban los datos",
              "fullTitle": "Evaluacion form con textBox Se ingresa mal el email, se valida que no suban los datos",
              "timedOut": false,
              "duration": 1096,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Modifico momentaneamente la variable email\n        let emailOriginal = form.email;\n        form.email = 'octavio';\n        //ingreso el form con la variable email editada para que de error\n        await textBox.enter_form(form, formSelectors);\n        //Obtengo el output\n        let output = await textBox.obtenerArrayOutput();\n        //valido que la variable de salida output esté vacía, ya que no se deberia hayar\n        assert.isEmpty(output);\n        form.email = emailOriginal;",
              "err": {},
              "uuid": "a6583c26-7762-47f0-8e4e-5c07b4b0fcd7",
              "parentUUID": "ec67860f-4321-410a-9e39-025ab3615841",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ec0a3158-5549-41c1-b16d-97f6ce968557",
            "c1f1f9de-a1a9-4170-b250-e9f5ec163a80",
            "a6583c26-7762-47f0-8e4e-5c07b4b0fcd7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3635,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "cbd5369a-bbd6-43a6-acd9-6c0b1c766e9d",
          "title": "Testeo correcta navegacion en la homePage para cada card",
          "fullFile": "C:\\Users\\octav\\OneDrive\\Escritorio\\seleniumAdvenced\\test\\homePage.spec.js",
          "file": "\\test\\homePage.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testeo correcta navegacion en la homePage para cada card\"",
              "fullTitle": "Testeo correcta navegacion en la homePage para cada card \"before each\" hook in \"Testeo correcta navegacion en la homePage para cada card\"",
              "timedOut": false,
              "duration": 1649,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Abro el navegador\ndriver = await new webdriver.Builder().forBrowser('chrome').build();\n//maximizo la ventana\nawait driver.manage().window().maximize();\n//Navego a la URL\nawait driver.get(\"https://demoqa.com/\");",
              "err": {},
              "uuid": "9b7bdbf0-e240-4d95-b532-e62d847932fd",
              "parentUUID": "cbd5369a-bbd6-43a6-acd9-6c0b1c766e9d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testeo correcta navegacion en la homePage para cada card\"",
              "fullTitle": "Testeo correcta navegacion en la homePage para cada card \"after each\" hook in \"Testeo correcta navegacion en la homePage para cada card\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "cc4a4d4f-de27-4805-ae10-ecaea21ba0bc",
              "parentUUID": "cbd5369a-bbd6-43a6-acd9-6c0b1c766e9d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Ingreso a la card Elements y verifico su ruta https://demoqa.com/elements",
              "fullTitle": "Testeo correcta navegacion en la homePage para cada card Ingreso a la card Elements y verifico su ruta https://demoqa.com/elements",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Obtengo una referencia de donde hacer click dentro de la card\n            let cardToClick = await driver.findElement(By.xpath(`//h5[contains(text(), '${card.cardTitle}')]`));\n            //Cliqueo\n            await cardToClick.click();\n            //Obtengo URL de la pagina a la cual navego y verifico coincida con la proporcionada\n            let urlNew = await driver.getCurrentUrl();\n            assert.equal(urlNew, card.URL);",
              "err": {},
              "uuid": "2b50837a-d127-47d5-9d87-589bbd63863c",
              "parentUUID": "cbd5369a-bbd6-43a6-acd9-6c0b1c766e9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ingreso a la card Forms y verifico su ruta https://demoqa.com/forms",
              "fullTitle": "Testeo correcta navegacion en la homePage para cada card Ingreso a la card Forms y verifico su ruta https://demoqa.com/forms",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Obtengo una referencia de donde hacer click dentro de la card\n            let cardToClick = await driver.findElement(By.xpath(`//h5[contains(text(), '${card.cardTitle}')]`));\n            //Cliqueo\n            await cardToClick.click();\n            //Obtengo URL de la pagina a la cual navego y verifico coincida con la proporcionada\n            let urlNew = await driver.getCurrentUrl();\n            assert.equal(urlNew, card.URL);",
              "err": {},
              "uuid": "24f9ed26-13d3-4941-8f29-5f6127e0b930",
              "parentUUID": "cbd5369a-bbd6-43a6-acd9-6c0b1c766e9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ingreso a la card Alerts y verifico su ruta https://demoqa.com/alertsWindows",
              "fullTitle": "Testeo correcta navegacion en la homePage para cada card Ingreso a la card Alerts y verifico su ruta https://demoqa.com/alertsWindows",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Obtengo una referencia de donde hacer click dentro de la card\n            let cardToClick = await driver.findElement(By.xpath(`//h5[contains(text(), '${card.cardTitle}')]`));\n            //Cliqueo\n            await cardToClick.click();\n            //Obtengo URL de la pagina a la cual navego y verifico coincida con la proporcionada\n            let urlNew = await driver.getCurrentUrl();\n            assert.equal(urlNew, card.URL);",
              "err": {},
              "uuid": "1f34c5ab-476b-47c8-820a-19ed66849683",
              "parentUUID": "cbd5369a-bbd6-43a6-acd9-6c0b1c766e9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ingreso a la card Widgets y verifico su ruta https://demoqa.com/widgets",
              "fullTitle": "Testeo correcta navegacion en la homePage para cada card Ingreso a la card Widgets y verifico su ruta https://demoqa.com/widgets",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Obtengo una referencia de donde hacer click dentro de la card\n            let cardToClick = await driver.findElement(By.xpath(`//h5[contains(text(), '${card.cardTitle}')]`));\n            //Cliqueo\n            await cardToClick.click();\n            //Obtengo URL de la pagina a la cual navego y verifico coincida con la proporcionada\n            let urlNew = await driver.getCurrentUrl();\n            assert.equal(urlNew, card.URL);",
              "err": {},
              "uuid": "db7bcf64-6513-423c-b22d-3d542bc908f2",
              "parentUUID": "cbd5369a-bbd6-43a6-acd9-6c0b1c766e9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ingreso a la card Interaction y verifico su ruta https://demoqa.com/interaction",
              "fullTitle": "Testeo correcta navegacion en la homePage para cada card Ingreso a la card Interaction y verifico su ruta https://demoqa.com/interaction",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Obtengo una referencia de donde hacer click dentro de la card\n            let cardToClick = await driver.findElement(By.xpath(`//h5[contains(text(), '${card.cardTitle}')]`));\n            //Cliqueo\n            await cardToClick.click();\n            //Obtengo URL de la pagina a la cual navego y verifico coincida con la proporcionada\n            let urlNew = await driver.getCurrentUrl();\n            assert.equal(urlNew, card.URL);",
              "err": {},
              "uuid": "69783ef1-e846-47a7-a2be-e7aac86f4944",
              "parentUUID": "cbd5369a-bbd6-43a6-acd9-6c0b1c766e9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ingreso a la card Book y verifico su ruta https://demoqa.com/books",
              "fullTitle": "Testeo correcta navegacion en la homePage para cada card Ingreso a la card Book y verifico su ruta https://demoqa.com/books",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Obtengo una referencia de donde hacer click dentro de la card\n            let cardToClick = await driver.findElement(By.xpath(`//h5[contains(text(), '${card.cardTitle}')]`));\n            //Cliqueo\n            await cardToClick.click();\n            //Obtengo URL de la pagina a la cual navego y verifico coincida con la proporcionada\n            let urlNew = await driver.getCurrentUrl();\n            assert.equal(urlNew, card.URL);",
              "err": {},
              "uuid": "67bb817a-57dd-434a-8985-fa520c1491fd",
              "parentUUID": "cbd5369a-bbd6-43a6-acd9-6c0b1c766e9d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2b50837a-d127-47d5-9d87-589bbd63863c",
            "24f9ed26-13d3-4941-8f29-5f6127e0b930",
            "1f34c5ab-476b-47c8-820a-19ed66849683",
            "db7bcf64-6513-423c-b22d-3d542bc908f2",
            "69783ef1-e846-47a7-a2be-e7aac86f4944",
            "67bb817a-57dd-434a-8985-fa520c1491fd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 284,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "c9564908-2100-46a0-9be1-784c22a34564",
          "title": "Testeo de hover",
          "fullFile": "C:\\Users\\octav\\OneDrive\\Escritorio\\seleniumAdvenced\\test\\hover.spec.js",
          "file": "\\test\\hover.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testeo de hover\"",
              "fullTitle": "Testeo de hover \"before each\" hook in \"Testeo de hover\"",
              "timedOut": false,
              "duration": 587,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await hover.get_driver(\"chrome\");\nawait hover.go_to_url(\"https://demoqa.com/tool-tips\")\nawait hover.maximize_window();",
              "err": {},
              "uuid": "2982cf9c-4d8a-418b-851d-fefadedfedb9",
              "parentUUID": "c9564908-2100-46a0-9be1-784c22a34564",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testeo de hover\"",
              "fullTitle": "Testeo de hover \"after each\" hook in \"Testeo de hover\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "b8406bd4-c54c-447b-8faa-0f1af557848d",
              "parentUUID": "c9564908-2100-46a0-9be1-784c22a34564",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Pruebo del hover del button",
              "fullTitle": "Testeo de hover Pruebo del hover del button",
              "timedOut": false,
              "duration": 1374,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Localiza el elemento hover\n        const elementoHover = await global.driver.findElement(By.id(selectors.buttonId));\n        // Realiza una acción de hover sobre el elemento\n        const actions = driver.actions({ bridge: true });\n        await actions.move({ origin: elementoHover }).perform();\n        // Espera a que aparezca el elemento de texto que deseas validar\n        const elementoTexto = await driver.wait(\n            until.elementLocated(By.id(selectors.hoverButtonId)),\n            5000 // Tiempo máximo de espera en milisegundos\n        );\n        // Valida el texto obtenido con el esperado\n        const textoActual = await elementoTexto.getText();\n        const textoEsperado = \"You hovered over the Button\";\n        assert.equal(textoActual, textoEsperado);",
              "err": {},
              "uuid": "dbde46c2-b95d-4948-a56a-dbd816d4f837",
              "parentUUID": "c9564908-2100-46a0-9be1-784c22a34564",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Pruebo del hover del button",
              "fullTitle": "Testeo de hover Pruebo del hover del button",
              "timedOut": false,
              "duration": 1379,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Localiza el elemento hover\n        const elementoHover = await global.driver.findElement(By.id(selectors.textFieldId));\n        // Realiza una acción de hover sobre el elemento\n        const actions = driver.actions({ bridge: true });\n        await actions.move({ origin: elementoHover }).perform();\n        // Espera a que aparezca el elemento de texto que deseas validar\n        const elementoTexto = await driver.wait(\n            until.elementLocated(By.id(selectors.hoverTextFieldId)),\n            5000 // Tiempo máximo de espera en milisegundos\n        );\n        // Valida el texto obtenido con el esperado\n        const textoActual = await elementoTexto.getText();\n        const textoEsperado = \"You hovered over the text field\";\n        assert.equal(textoActual, textoEsperado);",
              "err": {},
              "uuid": "c0125f02-9b20-47a9-9386-a618ed8055a6",
              "parentUUID": "c9564908-2100-46a0-9be1-784c22a34564",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dbde46c2-b95d-4948-a56a-dbd816d4f837",
            "c0125f02-9b20-47a9-9386-a618ed8055a6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2753,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "b3de6872-ae00-4943-8c58-7468df0c64f6",
          "title": "Test para buscar imagenes rotas",
          "fullFile": "C:\\Users\\octav\\OneDrive\\Escritorio\\seleniumAdvenced\\test\\imagenesRotas.spec.js",
          "file": "\\test\\imagenesRotas.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test para buscar imagenes rotas\"",
              "fullTitle": "Test para buscar imagenes rotas \"before each\" hook in \"Test para buscar imagenes rotas\"",
              "timedOut": false,
              "duration": 598,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await verificarImagen.get_driver(\"chrome\");\nawait verificarImagen.go_to_url(\"https://the-internet.herokuapp.com/broken_images\")\nawait verificarImagen.maximize_window();",
              "err": {},
              "uuid": "e1c1b1f4-acd2-46ee-a172-0c257c1d551c",
              "parentUUID": "b3de6872-ae00-4943-8c58-7468df0c64f6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Test para buscar imagenes rotas\"",
              "fullTitle": "Test para buscar imagenes rotas \"after each\" hook in \"Test para buscar imagenes rotas\"",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "569d6e67-847c-422f-a5b8-9672603f5005",
              "parentUUID": "b3de6872-ae00-4943-8c58-7468df0c64f6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Imagenes rotas",
              "fullTitle": "Test para buscar imagenes rotas Imagenes rotas",
              "timedOut": false,
              "duration": 2988,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Creo el array\n        let imagenesSinCargar = [];\n        let imagenes404 = [];\n        //LLamo a la funcion para obtener si es que hay imagenes sin cargar\n        imagenesSinCargar = await verificarImagen.imagenesSinCargar();\n        imagenes404 = await verificarImagen.imagenesNotFound();\n        if (imagenesSinCargar) {\n            console.log(`Hay imagenes que no cargaron y son las siguientes: ${imagenesSinCargar}`)\n        };\n        if (imagenes404) {\n            console.log(`Hay imagenes con enlaces rotos y son las siguientes: ${imagenes404}`)\n        };\n        //Dejo esta porque en este ejemplo necesito enlaces rotos y valido eso....\n        assert.isNotEmpty(imagenesSinCargar);\n        assert.isNotEmpty(imagenes404);\n        //Aqui si funcionace bien\n        /*  assert.isEmpty(imagenesSinCargar);\n         assert.isEmpty(imagenes404); */",
              "err": {},
              "uuid": "6cdf9f60-86eb-417c-9773-9326c714ff0f",
              "parentUUID": "b3de6872-ae00-4943-8c58-7468df0c64f6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6cdf9f60-86eb-417c-9773-9326c714ff0f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2988,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "679e2c43-a1c0-462a-883f-a2e2fe401f56",
          "title": "Se valida el login de un usuario",
          "fullFile": "C:\\Users\\octav\\OneDrive\\Escritorio\\seleniumAdvenced\\test\\login.spec.js",
          "file": "\\test\\login.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Se valida el login de un usuario\"",
              "fullTitle": "Se valida el login de un usuario \"before each\" hook in \"Se valida el login de un usuario\"",
              "timedOut": false,
              "duration": 597,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await login.get_driver(\"chrome\");\nawait login.go_to_url(\"https://the-internet.herokuapp.com/login\");\nawait login.maximize_window();",
              "err": {},
              "uuid": "c99cc625-7979-438b-915d-701d9aa05218",
              "parentUUID": "679e2c43-a1c0-462a-883f-a2e2fe401f56",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Se valida el login de un usuario\"",
              "fullTitle": "Se valida el login de un usuario \"after each\" hook in \"Se valida el login de un usuario\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await login.quite_driver();",
              "err": {},
              "uuid": "dcc5003f-38db-4032-b742-442c7e39eeb9",
              "parentUUID": "679e2c43-a1c0-462a-883f-a2e2fe401f56",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Se valida el login y logout exitosos",
              "fullTitle": "Se valida el login de un usuario Se valida el login y logout exitosos",
              "timedOut": false,
              "duration": 2207,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Ingreso el formulario\nawait login.ingresoUsuario(selectorsForm, userForm);\n//Obtengo la url y la valido que sea /secure\nflash = await global.driver.findElement(By.id(selectorsForm.flashMessageId));\nawait login.waitElementIsVisible(flash);\nflash = await login.getTextById(selectorsForm.flashMessageId);\nassert.include(flash, flashMessages.alreadylogged);\n//Obtengo la url y la valido\nUrl = await global.driver.getCurrentUrl();\nassert.equal(UrlForm.loggIn, Url);\n//Busco el boton logOut y valido que exista\nlet buttonLogOut = await login.getTextByCss(selectorsForm.logOutButtonCss);\nassert.exists(buttonLogOut);\n\n//Valido el contenido\nassert.equal(buttonLogOut, \"Logout\");\n//Cliqueo el boton\nawait login.clickByCss(selectorsForm.logOutButtonCss);\n//Valido el mensaje flash de logout exitoso\nflash = await global.driver.findElement(By.id(selectorsForm.flashMessageId));\nawait login.waitElementIsVisible(flash);\nflash = await login.getTextById(selectorsForm.flashMessageId);\nassert.include(flash, flashMessages.loginPage);\n//Obtengo la url y la valido que sea /login\nUrl = await global.driver.getCurrentUrl();\nassert.equal(UrlForm.loggOut, Url);",
              "err": {},
              "uuid": "e64fe47d-fe4f-411e-a996-55adaed7e482",
              "parentUUID": "679e2c43-a1c0-462a-883f-a2e2fe401f56",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Username invalido",
              "fullTitle": "Se valida el login de un usuario Username invalido",
              "timedOut": false,
              "duration": 1924,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//cambio el password del usuario para el ingreso\nlet userOriginal = userForm.user;\nuserForm.user = \"Pedro\";\nawait login.ingresoUsuario(selectorsForm, userForm);\n//Obtengo la url y la valido que sea /login\nUrl = await global.driver.getCurrentUrl();\nassert.equal(UrlForm.loggOut, Url);\n//Obtengo el mensaje Flash de login y valido\nflash = await global.driver.findElement(By.id(selectorsForm.flashMessageId));\nawait login.waitElementIsVisible(flash);\nflash = await login.getTextById(selectorsForm.flashMessageId);\nassert.include(flash, flashMessages.invalidUser);\nuserForm.user = userOriginal;",
              "err": {},
              "uuid": "63f347f8-5e9e-4436-acae-3caa49e1d579",
              "parentUUID": "679e2c43-a1c0-462a-883f-a2e2fe401f56",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Password invalido",
              "fullTitle": "Se valida el login de un usuario Password invalido",
              "timedOut": false,
              "duration": 1952,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//cambio el password del usuario para el ingreso\nlet passOriginal = userForm.pass;\nuserForm.pass = \"123\";\nawait login.ingresoUsuario(selectorsForm, userForm);\n//Obtengo la url y la valido que sea /login\nUrl = await global.driver.getCurrentUrl();\nassert.equal(UrlForm.loggOut, Url);\n//Obtengo el mensaje Flash de login y valido\nflash = await global.driver.findElement(By.id(selectorsForm.flashMessageId));\nawait login.waitElementIsVisible(flash);\nflash = await login.getTextById(selectorsForm.flashMessageId);\nassert.include(flash, flashMessages.invalidPass);\nuserForm.pass = passOriginal;",
              "err": {},
              "uuid": "defa3583-6d5b-42cf-990f-182b93dc05b4",
              "parentUUID": "679e2c43-a1c0-462a-883f-a2e2fe401f56",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e64fe47d-fe4f-411e-a996-55adaed7e482",
            "63f347f8-5e9e-4436-acae-3caa49e1d579",
            "defa3583-6d5b-42cf-990f-182b93dc05b4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6083,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "6543dcce-a6c5-4a4b-b728-25f39a2c91a3",
          "title": "Navegación dentro de pestañas",
          "fullFile": "C:\\Users\\octav\\OneDrive\\Escritorio\\seleniumAdvenced\\test\\windows.spec.js",
          "file": "\\test\\windows.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Navegación dentro de pestañas\"",
              "fullTitle": "Navegación dentro de pestañas \"before each\" hook in \"Navegación dentro de pestañas\"",
              "timedOut": false,
              "duration": 602,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await windows.get_driver(\"chrome\");\nawait windows.go_to_url(\"https://demoqa.com/browser-windows\")\nawait windows.maximize_window();",
              "err": {},
              "uuid": "925af917-4d02-4a9b-9a38-6078e5ec0655",
              "parentUUID": "6543dcce-a6c5-4a4b-b728-25f39a2c91a3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Navegación dentro de pestañas\"",
              "fullTitle": "Navegación dentro de pestañas \"after each\" hook in \"Navegación dentro de pestañas\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "d29feabe-97b3-494f-a7b9-d4b7eaf1b540",
              "parentUUID": "6543dcce-a6c5-4a4b-b728-25f39a2c91a3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Se abren dos pestañas y se navega a la primera abierta, se valida su URL",
              "fullTitle": "Navegación dentro de pestañas Se abren dos pestañas y se navega a la primera abierta, se valida su URL",
              "timedOut": false,
              "duration": 1270,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Abrir una nueva pestaña (esto puede variar según el navegador)\n        const button = await global.driver.findElement(By.id(selectors.newTabButtonId));\n        //const button = await global.driver.wait(until.elementLocated(By.css(selectors.newTabButtonId)), 2000);\n        await button.click();\n        await button.click();\n        // Cambiar al contexto de la nueva pestaña\n        const ventanas = await driver.getAllWindowHandles();\n        await driver.switchTo().window(ventanas[1]); // Cambiar a la segunda pestaña\n        // Navegar en la segunda pestaña\n        const header = await global.driver.findElement(By.id(selectors.headingId));\n        // Realizar acciones en la segunda pestaña (puede ser cualquier interacción)\n        assert.equal(await header.getText(), \"This is a sample page\")\n        // Cambiar de nuevo al contexto de la primera pestaña\n        await driver.switchTo().window(ventanas[2]); // Cambiar a la primera pestaña\n        // Realizar acciones en la primera pestaña (puede ser cualquier interacción)\n        // Cerrar la segunda pestaña (esto también puede variar según el navegador)\n        await global.driver.close();\n        await driver.switchTo().window(ventanas[1]);\n        await global.driver.close();",
              "err": {},
              "uuid": "fe64c5e8-ea09-43b5-8e62-f4f48d884022",
              "parentUUID": "6543dcce-a6c5-4a4b-b728-25f39a2c91a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Se abren dos ventanas y se navega a la primera abierta, se valida su URL",
              "fullTitle": "Navegación dentro de pestañas Se abren dos ventanas y se navega a la primera abierta, se valida su URL",
              "timedOut": false,
              "duration": 4140,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Abrir una nueva pestaña (esto puede variar según el navegador)\n        const button = await global.driver.findElement(By.id(selectors.newWindowButtonId));\n        await button.click();\n        await button.click();\n        // Cambiar al contexto de la nueva pestaña\n        const ventanas = await driver.getAllWindowHandles();\n        await driver.switchTo().window(ventanas[1]); // Cambiar a la segunda pestaña\n        // Realiza acciones en la segunda ventana\n        await driver.get('https://www.example2.com');\n        await windows.maximize_window();\n        let input = await global.driver.findElement(By.css('#searchform > input'));\n        await input.sendKeys(\"100\", Key.RETURN);",
              "err": {},
              "uuid": "235f7240-9403-40a6-bb78-145276603ac2",
              "parentUUID": "6543dcce-a6c5-4a4b-b728-25f39a2c91a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Se ventana emergente con mensaje",
              "fullTitle": "Navegación dentro de pestañas Se ventana emergente con mensaje",
              "timedOut": false,
              "duration": 1166,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Abrir una nueva pestaña (esto puede variar según el navegador)\n        const button = await global.driver.findElement(By.id(selectors.newWindowMessageButtonId));\n        await button.click();\n        await button.click();\n        // Cambiar al contexto de la nueva pestaña\n        const ventanas = await driver.getAllWindowHandles();\n        assert.lengthOf(ventanas, 2, \"Se esperaban 2 ventanas ya que es lo maximo que permite abrir a la vez\")\n        await driver.switchTo().window(ventanas[1]); // Cambiar a la segunda pestaña",
              "err": {},
              "uuid": "ab3cc749-754d-43db-9328-9216d0fa98b9",
              "parentUUID": "6543dcce-a6c5-4a4b-b728-25f39a2c91a3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fe64c5e8-ea09-43b5-8e62-f4f48d884022",
            "235f7240-9403-40a6-bb78-145276603ac2",
            "ab3cc749-754d-43db-9328-9216d0fa98b9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6576,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "testResults",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "/Users/octav/OneDrive/Escritorio/seleniumAdvenced/TestsReports",
        "reportFilename": "testResults"
      },
      "version": "6.2.0"
    }
  }
}